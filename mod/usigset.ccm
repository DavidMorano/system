/* ucsigset MODULE (primary-module-interface) */
/* encoding=ISO8859-1 */
/* lang=C++20 (conformance reviewed) */

/* interface component for UNIX® library-3c */
/* version %I% last-modified %G% */


/* revision history:

	= 2000-05-14, David A­D­ Morano
	Originally written for Rightcore Network Services.

	= 2020-05-07, David A-D- Morano
	I converted this (formerly a header-only file) to a module.

*/

/* Copyright © 2000,2020 David A­D­ Morano.  All rights reserved. */

module ;

#include	<envstandards.h>	/* MUST be first to configure */
#include	<pthread.h>		/* |pthread_setmask(3c)| */
#include	<csignal>
#include	<cerrno>
#include	<cstddef>		/* |nullptr_t| */
#include	<cstdlib>
#include	<usystem.h>

export module usigset ;

/* local defines */


/* local namespaces */


/* local typedefs */


/* external subroutines */


/* external variables */


/* local structures */


/* forward references */


/* local variables */


/* exported variables */


/* exported subroutines */

export {
    int usigmask(int how,sigset_t *setp,sigset_t *osetp) noex {
	int		rs = SR_INVALID ;
	if (how >= 0) {
	    rs = SR_OK ;
	    if (errno_t ec ; (ec = pthread_sigmask(how,setp,osetp)) > 0) {
	        rs = (- ec) ;
	    }
	} /* end if (valid) */
	return rs ;
    } /* end subroutine (usigmask) */
} /* end export (usigset) */

export {
    typedef sigset_t	usigset ;
    int usigset_mask(sigset_t *setp,int how,sigset_t *osetp) noex {
	return usigmask(how,setp,osetp) ;
    } /* end subroutine (usigset_mask) */
    int usigset_empty(sigset_t *sp) noex {
	int		rs = SR_FAULT ;
	if (sp) {
	    if ((rs = sigemptyset(sp)) < 0) {
	        rs = (- errno) ;
	    }
	} /* end if (non-null) */
	return rs ;
    } /* end subroutine (usigset_empty) */
    int usigset_fill(sigset_t *sp) noex {
	int		rs = SR_FAULT ;
	if (sp) {
	    if ((rs = sigfillset(sp)) < 0) {
	        rs = (- errno) ;
	    }
	} /* end if (non-null) */
	return rs ;
    } /* end subroutine (usigset_fill) */
    int usigset_add(sigset_t *sp,int sn) noex {
	int		rs = SR_FAULT ;
	if (sp) {
	    rs = SR_INVALID ;
	    if (sn >= 0) {
	        if ((rs = sigaddset(sp,sn)) < 0) {
	            rs = (- errno) ;
	        }
	    } /* end if (valid) */
	} /* end if (non-null) */
	return rs ;
    } /* end subroutine (usigset_add) */
    int usigset_del(sigset_t *sp,int sn) noex {
	int		rs = SR_FAULT ;
	if (sp) {
	    rs = SR_INVALID ;
	    if (sn >= 0) {
	        if ((rs = sigdelset(sp,sn)) < 0) {
	            rs = (- errno) ;
	        }
	    } /* end if (valid) */
	} /* end if (non-null) */
	return rs ;
    } /* end subroutine (usigset_del) */
    int usigset_ismem(sigset_t *sp,int sn) noex {
	int		rs = SR_FAULT ;
	if (sp) {
	    rs = SR_INVALID ;
	    if (sn >= 0) {
	        if ((rs = sigismember(sp,sn)) < 0) {
		    rs = (- errno) ;
	        }
	    } /* end if (valid) */
	} /* end if (non-null) */
	return rs ;
    } /* end subroutine (usigset_ismem) */
} /* end export (usigset) */



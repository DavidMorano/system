/* ulibvals MODULE (Ukernel-Library-Values) */
/* encoding=ISO8859-1 */
/* lang=C++20 (conformance reviewed) */

/* retrieve various Ukernel-Library-Values */
/* version %I% last-modified %G% */


/* revision history:

	= 2001-04-11, David A-D- Morano
	Originally written for Rightcore Network Services.

*/

/* Copyright © 2001 David A­D­ Morano.  All rights reserved. */

/*******************************************************************************

  	Name:
	ulibvals

	Description:
	This module contains a structure (ULIBVALS) that itself
	contains various system related integer values.

	Synopsis:
	import ulibvals
	ulibval.{x}

	Returns:
	>=0		requested value
	<0		error (system-return)

*******************************************************************************/

module ;

#include	<envstandards.h>	/* ordered first to configure */
#include	<unistd.h>		/* |sysconf(3c)| stuff */
#include	<cstddef>		/* |nullptr_t| */
#include	<cstdlib>
#include	<bit>			/* |endian(3c++)| */
#include	<clanguage.h>
#include	<utypedefs.h>
#include	<utypealiases.h>
#include	<usysdefs.h>
#include	<libutil.hh>		/* |xstrlen(3u)| */
#include	<syswords.hh>		/* |sysword(3u)| */
#include	<localmisc.h>		/* |{xxx}BUFLEN| */

export module ulibvals ;

import usysconf ;			/* |usysconfval(3u)| */

export {
    struct ulibvals {
	static const int	endian ;
	static const int	maxbase ;
	static const int	pagesz ;
	static const int	clktck ;
	static const int	maxarg ;
	static const int	maxline ;
	static const int	maxlogin ;
	static const int	binbflen ;	/* for |int256_t| */
	static const int	octbflen ;	/* for |int256_t| */
	static const int	decbflen ;	/* for |int256_t| */
	static const int	hexbflen ;	/* for |int256_t| */
    } ; /* end struct (ulibvals) */
} /* end export */

export {
    extern const ulibvals	ulibval ;
}

using std::endian ;			/* enumeration */

static constexpr int mkendian() noex {
    	using enum	endian ;	/* get the values */
    	int	n ;
	if_constexpr (native == little) {
	    n = 0 ;
	} else if_constexpr (native == big) {
	    n = 1 ;
	} else {
	    n = 2 ;
	}
	return n ;
} /* end subroutine (mkendian) */

const int	ulibvals::endian	= mkendian() ;
const int	ulibvals::maxbase	= xstrlen(sysword.w_digtab) ;
const int	ulibvals::pagesz	= usysconfval(_SC_PAGESIZE) ;
const int	ulibvals::clktck	= usysconfval(_SC_CLK_TCK) ;
const int	ulibvals::maxarg	= usysconfval(_SC_ARG_MAX) ;
const int	ulibvals::maxline	= usysconfval(_SC_LINE_MAX) ;
const int	ulibvals::maxlogin	= usysconfval(_SC_LOGIN_NAME_MAX) ;
const int	ulibvals::binbflen	= BINBUFLEN ;	/* for |int256_t| */
const int	ulibvals::octbflen	= OCTBUFLEN ;	/* for |int256_t| */
const int	ulibvals::decbflen	= DECBUFLEN ;	/* for |int256_t| */
const int	ulibvals::hexbflen	= HEXBUFLEN ;	/* for |int256_t| */

const ulibvals	ulibval ;



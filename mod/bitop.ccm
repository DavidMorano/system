/* bitop MODULE (primary-module-interface) */
/* encoding=ISO8859-1 */
/* lang=C++20 (conformance reviewed) */

/* perform the most basic bit operations on integral words */
/* lang=C++20 (conformance reviewed) */


/* revision history:

	= 1998-04-10, David A­D­ Morano
        This code was originally written.

	= 2020-01-09, David A­D­ Morano
	I modularized this code from a header file.  Whether this
	really turns out to be a good idea is another question.

*/
	
/* Copyright © 1998,2020 David A­D­ Morano.  All rights reserved. */
/* Use is subject to license terms. */

/*******************************************************************************

  	Group:
	bitop_set
	bitop_clr
	bitop_tst

	Description:
	Perform the most basic bit operations on integral types:
		set, clr, and tst

	Notes:
	1. This code is different than the |baops(3uc)| facility
	(which is much older).  That facility operates on arrays
	of various sized types in the old philosophy of the DEC
	VAX-11® bit operations (which was what it was sort of based
	on -- at array of bytes).

*******************************************************************************/

module ;

#include	<envstandards.h>	/* ordered first to configure */
#include	<cstddef>		/* |nullptr_t| */
#include	<cstdlib>
#include	<concepts>
#include	<clanguage.h>
#include	<utypedefs.h>
#include	<utypealiases.h>
#include	<usysdefs.h>
#include	<localmisc.h>

export module bitop ;

using std::integral ;

export {
    template<integral T> void bitop_set(T &v,int n) noex {
	const T one = 1 ;
	v |= (one << n) ;
    }
    template<integral T> void bitop_clr(T &v,int n) noex {
	const T one = 1 ;
	v &= (compl (one << n)) ;
    }
    template<integral T> constexpr bool bitop_tst(const T &v,int n) noex {
	const T one = 1 ;
	return bool(v & (one << n)) ;
    }
} /* end export */



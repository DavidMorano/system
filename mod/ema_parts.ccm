/* ema_parts MODULE (primary module interface) */
/* encoding=ISO8859-1 */
/* lang=C++20 */

/* AS-String (parts) -- used within EMA */
/* version %I% last-modified %G% */


/* revision history:

	= 1998-03-01, David A­D­ Morano
	This object module was originally written.

*/

/* Copyright © 1998 David A­D­ Morano.  All rights reserved. */

/*******************************************************************************

  	Object:
	parts

	Description:
	This is an email address handling module object.  It can
	parse out and store hierarchically organized EMAs.

*******************************************************************************/

module ;

#include	<envstandards.h>	/* MUST be ordered first to configure */
#include	<cstddef>		/* |nullptr_t| */
#include	<cstdlib>
#include	<clanguage.h>
#include	<utypedefs.h>
#include	<utypealiases.h>
#include	<usysdefs.h>
#include	<usysrets.h>

export module ema_parts ;

import ema_asstr ;

using namespace::emaobj ;		/* namespace */
using std::nullptr_t ;			/* type */
using std::nothrow ;			/* constant */

export {
    namespace emaobj {
        int	partsbegin(asstr *) noex ;
        int	partslen(asstr *) noex ;
        int	partsend(asstr *) noex ;
    }
} /* end export */

namespace emaobj {
    int partsbegin(asstr *asp) noex {
	int		rs = SR_FAULT ;
	if (asp) {
	    rs = SR_OK ;
	    for (int i = 0 ; (rs >= 0) && (i < si_overlast) ; i += 1) {
	        rs = asstr_start(asp + i) ;
	    }
	} /* end if (non-null) */
	return rs ;
    } /* end subroutine (partsbegin) */
    int partslen(asstr *asp) noex {
	int		rs = SR_FAULT ;
	int		rs1 ;
	int		len = 0 ; /* return-value */
	if (asp) {
	    rs = SR_OK ;
	    for (int i = 0 ; i < si_overlast ; i += 1) {
	        asstr_backwhite(asp+i) ;
	        rs1 = asstr_len(asp+i) ;
	        if (rs1 >= 0) len += rs1 ;
	    } /* end for */
	} /* end if (non-null) */
	return (rs >= 0) ? len : rs ;
    } /* end subroutine (partslen) */
    int partsend(asstr *asp) noex {
	int		rs = SR_FAULT ;
	int		rs1 ;
	if (asp) {
	    rs = SR_OK ;
	    for (int i = 0 ; i < si_overlast ; i += 1) {
	        rs1 = asstr_finish(asp + i) ;
	        if (rs >= 0) rs = rs1 ;
	    }
	} /* end if (non-null) */
	return rs ;
    } /* end subroutine (partsend) */
} /* end namespace (emaobj) */



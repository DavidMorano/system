/* builtin HEADER */
/* encoding=ISO8859-1 */
/* lang=C++20 (conformance reviewed) */

/* UNIX® kernel support subroutines */
/* version %I% last-modified %G% */


/* Copyright © 1998 David A­D­ Morano.  All rights reserved. */

/*******************************************************************************

	Group:
	builtin

	Description:
	I either make the GCC built-in intrinsics available (but under
	other names) or I implment an alternative.

*******************************************************************************/

module ;

#include	<envstandards.h>	/* ordered first to configure */
#include	<cstddef>		/* |nullptr_t| */
#include	<cstdlib>
#include	<clanguage.h>
#include	<utypedefs.h>
#include	<utypealiases.h>
#include	<usysdefs.h>

export module builtin ;

#if defined(__has_builtin)
#  if __has_builtin(__builtin_addc)
#define	F_ADDC	1
constexpr inline uint builtin_addc(uint v0,uint v1,uint ci,
		uint *cop) noex {
    return __builtin_addc(v0,v1,ci,cop) ;
}
constexpr inline ulong builtin_addc(ulong v0,ulong v1,ulong ci,
		ulong *cop) noex {
    return __builtin_addcl(v0,v1,ci,cop) ;
}
#  else
#define	F_ADDC	0
constexpr inline uint builtin_addc(uint v0,uint v1,uint ci,
		uint *) noex {
    return v0 + v1 + ci ;
}
constexpr inline ulong builtin_addc(ulong v0,ulong v1,ulong ci,
		ulong *) noex {
    return v0 + v1 + ci ;
}
#  endif
#else
#define	F_ADDC	0
constexpr inline uint builtin_addc(uint v0,uint v1,uint ci,
		uint *) noex {
    return v0 + v1 + ci ;
}
constexpr inline ulong builtin_addc(ulong v0,ulong v1,ulong ci,
		ulong *) noex {
    return v0 + v1 + ci ;
}
#endif /* defined(__has_builtin) */

#if defined(__has_builtin)
#  if __has_builtin(__builtin_subc)
#define	F_SUBC	1
constexpr inline uint builtin_subc(uint v0,uint v1,uint ci,
		uint *cop) noex {
    return __builtin_subc(v0,v1,ci,cop) ;
}
constexpr inline ulong builtin_subc(ulong v0,ulong v1,ulong ci,
		ulong *cop) noex {
    return __builtin_subcl(v0,v1,ci,cop) ;
}
#  else
#define	F_SUBC	0
constexpr inline uint builtin_subc(uint v0,uint v1,uint ci,
		uint *) noex {
    return v0 + v1 + ci ;
}
constexpr inline ulong builtin_subc(ulong v0,ulong v1,ulong ci,
		ulong *) noex {
    return v0 + v1 + ci ;
}
#  endif
#else
#define	F_SUBC	0
constexpr inline uint builtin_subc(uint v0,uint v1,uint ci,
		uint *) noex {
    return v0 + v1 + ci ;
}
constexpr inline ulong builtin_subc(ulong v0,ulong v1,ulong ci,
		ulong *) noex {
    return v0 + v1 + ci ;
}
#endif /* defined(__has_builtin) */

constexpr inline cbool		f_machaddc = F_ADDC ;
constexpr inline cbool		f_machsubc = F_SUBC ;

template<typename UT> constexpr inline uint mach_addone(UT &r,UT v) noex {
	r = v + 1 ;
	return int((r < v) || (r == 0)) ;
} /* end subroutine (mach_addone) */

template<typename UT> constexpr inline uint mach_subone(UT &r,UT v) noex {
	r = v - 1 ;
	return int((r < v) || (r == 0)) ;
} /* end subroutine (mach_subone) */

export {
    template<typename UT> 
    constexpr inline UT mach_addc(UT v0,UT v1,UT ci,UT *cop) noex {
    	UT	r ;
    	if_constexpr (f_machaddc) {
	    r = builtin_addc(v0,v1,ci,cop) ;
	} else {
    	    uint	co = 0 ;
	    r = v0 + v1 ;
	    co = (r < v0) || (r < v1) ;
	    if (ci) {
	        UT t = r ;
	        co += mach_addone(r,t) ;
	    }
	    if (cop) *cop = UT(co) ;
	} /* end if_constexpr (f_machaddc) */
	return r ;
    } /* end subroutine (mach_addc) */
    template<typename UT> 
    constexpr inline UT mach_subc(UT v0,UT v1,UT ci,UT *cop) noex {
    	UT	r ;
    	if_constexpr (f_machsubc) {
	    r = builtin_subc(v0,v1,ci,cop) ;
	} else {
    	    uint	co = 0 ;
	    r = v0 - v1 ;
	    co = (r > v0) || (v0 < v1) ;
	    if (ci) {
	        UT t = r ;
	        co += mach_subone(r,t) ;
	    }
	    if (cop) *cop = UT(co) ;
	} /* end if_constexpr (f_machsubc) */
	return r ;
    } /* end subroutine (mach_subc) */
} /* end export */



/* ema_asstr MODULE (primary module interface) */
/* charset=ISO8859-1 */
/* lang=C++20 */

/* AS-String (asstr) -- used within EMA */
/* version %I% last-modified %G% */


/* revision history:

	= 1998-03-01, David A­D­ Morano
	This object module was originally written.

*/

/* Copyright © 1998 David A­D­ Morano.  All rights reserved. */

/*******************************************************************************

  	Object:
	asstr

	Description:
	This is an email address handling module object.  It can
	parse out and store hierarchically organized EMAs.

*******************************************************************************/

module ;

#include	<envstandards.h>	/* MUST be ordered first to configure */
#include	<cstddef>		/* |nullptr_t| */
#include	<cstdlib>
#include	<clanguage.h>
#include	<utypedefs.h>
#include	<utypealiases.h>
#include	<usysdefs.h>
#include	<usysrets.h>
#include	<ucmemalloc.h>
#include	<char.h>
#include	<mkchar.h>
#include	<localmisc.h>

export module ema_asstr ;

constexpr int	addresslen = 60 ;	/* starting address length */

export namespace emaobj {
    enum sis {
	si_address,
	si_route,
	si_comment,
	si_overlast
    } ;
    struct asstr_head {
	char		*sp ;
	int		sl ;
	int		e ;
    } ; /* end struct (asstr_head) */
    typedef asstr_head	asstr ;
} /* end export */

export {
    namespace emaobj {
        int	asstr_start(asstr *) noex ;
        int	asstr_addchr(asstr *,int) noex ;
        int	asstr_get(asstr *) noex ;
        int	asstr_getprev(asstr *) noex ;
        int	asstr_adv(asstr *) noex ;
        int	asstr_skipwhite(asstr *) noex ;
        int	asstr_backwhite(asstr *) noex ;
        int	asstr_len(asstr *) noex ;
        int	asstr_finish(asstr *) noex ;
    }
} /* end export */


/* imported namespaces */

using std::nullptr_t ;			/* type */
using std::nothrow ;			/* constant */


/* local typedefs */


/* external subroutines */


/* external variables */


/* local structures */


/* forward references */


/* local variables */


/* exported variables */


/* exported subroutines */

namespace emaobj {

    int asstr_start(asstr *asp) noex {
	int		rs = SR_FAULT ;
	if (asp) {
	    rs = SR_OK ;
	    asp->sp = nullptr ;
	    asp->sl = 0 ;
	    asp->e = 0 ;
	} /* end if (non-null) */
	return rs ;
    } /* end subroutine (asstr_start) */

    int asstr_finish(asstr *asp) noex {
	int		rs = SR_FAULT ;
	int		rs1 ;
	if (asp) {
	    rs = SR_OK ;
	    if (asp->sp != nullptr) {
	        rs1 = uc_free(asp->sp) ;
	        if (rs >= 0) rs = rs1 ;
	        asp->sp = nullptr ;
	    }
	    asp->sl = 0 ;
	    asp->e = 0 ;
	} /* end if (non-null) */
	return rs ;
    } /* end subroutine (asstr_finish) */

    int asstr_addchr(asstr *asp,int ch) noex {
	int		rs = SR_FAULT ;
	int		len = 0 ; /* return-value */
	if (asp) {
	    int		ne ; /* multiple-uses */
	    char	*cp{} ; /* multiple-uses */
	    rs = SR_OK ;
	    if (asp->sp == nullptr) {
	        asp->sl = 0 ;
	        ne = addresslen ;
	        if ((rs = uc_malloc((ne + 1),&cp)) >= 0) {
	            asp->sp = cp ;
	            asp->e = ne ;
	        }
	    }
	    if ((rs >= 0) && (asp->e == asp->sl)) {
	        ne = (asp->e + addresslen) ;
	        if ((rs = uc_realloc(asp->sp,(ne + 1),&cp)) >= 0) {
	            asp->sp = cp ;
	            asp->e = ne ;
	        }
	    }
	    if (rs >= 0) {
	        asp->sp[(asp->sl)++] = char(ch) ;
	        asp->sp[asp->sl] = '\0' ;
	        len = asp->sl ;
	    }
	} /* end if (non-null) */
	return (rs >= 0) ? len : rs ;
    } /* end subroutine (asstr_addchr) */

    int asstr_get(asstr *asp) noex {
	int		rs = SR_FAULT ;
	int		ch = 0 ; /* return-value */
	if (asp) {
	    rs = SR_OK ;
	    if (asp->sl > 0) {
	        ch = mkchar(asp->sp[0]) ;
	    } else {
	        rs = SR_EOF ;
	    }
	} /* end if (non-null) */
	return (rs >= 0) ? ch : rs ;
    } /* end subroutine (asstr_get) */

    int asstr_getprev(asstr *asp) noex {
	int		rs = SR_FAULT ;
	int		ch = 0 ; /* return-value */
	if (asp) {
	    rs = SR_OK ;
	    if (asp->sl > 0) {
	        ch = mkchar(asp->sp[asp->sl-1]) ;
	    } else {
	        rs = SR_EOF ;
	    }
	} /* end if (non-null) */
	return (rs >= 0) ? ch : rs ;
    } /* end subroutine (asstr_getprev) */

    int asstr_adv(asstr *asp) noex {
	int		rs = SR_FAULT ;
	int		ch = 0 ; /* return-value */
	if (asp) {
	    rs = SR_OK ;
	    if (asp->sl > 0) {
	        asp->sp += 1 ;
	        asp->sl -= 1 ;
	    }
	    if (asp->sl > 0) {
	        ch = mkchar(asp->sp[0]) ;
	    } else {
	        rs = SR_EOF ;
	    }
	} /* end if (non-null) */
	return (rs >= 0) ? ch : rs ;
    } /* end subroutine (asstr_adv) */

    int asstr_len(asstr *asp) noex {
	int		rs = SR_FAULT ;
	if (asp) {
	    rs = asp->sl ;
	} /* end if (non-null) */
	return rs ;
    } /* end subroutine (asstr_len) */

    int asstr_skipwhite(asstr *asp) noex {
	int		rs = SR_FAULT ;
	int		i = 0 ; /* return-value */
	if (asp->sp) {
	    rs = SR_OK ;
	    while ((asp->sl != 0) && CHAR_ISWHITE(*(asp->sp))) {
	        asp->sp += 1 ;
	        if (asp->sl > 0) asp->sl -= 1 ;
	        i += 1 ;
	    } /* end while */
	} /* end if (non-null) */
	return (rs >= 0) ? i : rs ;
    } /* end subroutine (asstr_skipwhite) */

    int asstr_backwhite(asstr *asp) noex {
	int		rs = SR_FAULT ;
	int		f = false ; /* return-value */
	if (asp) {
	    rs = SR_OK ;
	    while (asp->sl > 0) {
	        cint	lch = asp->sp[asp->sl-1] ;
	        f = CHAR_ISWHITE(lch) ;
	        if (! f) break ;
	        asp->sl -= 1 ;
	    } /* end while */
	} /* end if (non-null) */
	return (rs >= 0) ? f : rs ;
    } /* end subroutine (asstr_backwhite) */

} /* end namespace (emaobj) */



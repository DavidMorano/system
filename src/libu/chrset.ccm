/* chrset MODULE (primary-module-interface) */
/* charset=ISO8859-1 */
/* lang=C++20 (conformance reviewed) */

/* character-bit-set */
/* version %I% last-modified %G% */

#define	MODULE		1		/* signal module (if anyone cares) */

/* revision history:

	= 1998-04-10, David A­D­ Morano
        This code was originally written.

	= 2020-01-09, David A­D­ Morano
	I modularized this code from a header file.  Whether this
	really turns out to be a good idea is another question.

*/
	
/* Copyright © 1998,2020 David A­D­ Morano.  All rights reserved. */
/* Use is subject to license terms. */

/*******************************************************************************

	Object:
	chrset

	Description:
	Provide operations on a character-bit-set.

*******************************************************************************/

module ;

#include	<envstandards.h>	/* ordered first to configure */
#include	<climits>		/* |UCHAR_MAX| + |CHAR_BIT| */
#include	<cstddef>		/* |nullptr_t| */
#include	<cstdlib>
#include	<concepts>
#include	<clanguage.h>
#include	<utypedefs.h>
#include	<utypealiases.h>
#include	<usysdefs.h>
#include	<usysrets.h>
#include	<stdintx.h>
#include	<baops.h>
#include	<localmisc.h>

export module chrset ;

typedef ulong	word_t ;

constexpr int	nwords = ((UCHAR_MAX + 1) / (szof(word_t) * CHAR_BIT)) ;

export {
    struct chrset {
	word_t		bs[nwords] = {} ;	/* 32 bytes (4 words) */
	constexpr int load(cchar *) noex ;
	constexpr chrset() = default ;
	constexpr chrset(cchar *ss) noex {
	    load(ss) ;
	} ;
	constexpr void set(int) noex ;
	constexpr void clr(int) noex ;
	constexpr bool tst(int) const noex ;
	constexpr bool operator [] (int ch) const noex {
	    return batst(bs,ch) ;
	} ;
    } ; /* end struct (chrset) */
} /* end export */

constexpr int chrset::load(cchar *ss) noex {
    	int		rs = SR_FAULT ;
	if (ss) {
	    for (int ch ; ((ch = (*ss & UCHAR_MAX))) ; ss += 1) {
		baset(bs,ch) ;
	    } /* end for */
	} /* end if (non-null) */
	return rs ;
} /* end method (chrset::load) */

constexpr bool chrset::tst(int ch) const noex {
	return bool(batst(bs,ch)) ;
} /* end method (chrset::tst) */

constexpr void chrset::set(int ch) noex {
	baset(bs,ch) ;
} /* end method (chrset::set) */

constexpr void chrset::clr(int ch) noex {
	baclr(bs,ch) ;
} /* end method (chrset::clr) */



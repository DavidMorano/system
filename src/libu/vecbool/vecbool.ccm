/* vecbool MODULE (primary-module-interface) */
/* charset=ISO8859-1 */
/* lang=C++20 (conformance reviewed) */

/* manage a variable length bit-array */
/* version %I% last-modified %G% */


/* revision history:

	= 1998-09-10, David A­D­ Morano
	This subroutine was written for Rightcore Network Services.

	= 2020-08-13, David A­D­ Morano
	This code has been modularized (w/ C++20 modules).
	There was really no good reason for this.  In many cases,
	w/ my limited experience w/ modules so far, sometimes
	modules are more of a hassle than they are worth.

*/

/* Copyright © 1998,2020 David A­D­ Morano.  All rights reserved. */

/*******************************************************************************

	Module:
	vecbool

	Description:
	This object implements an array of bits (bools).

	Synopsis:

	Arguments:

	Returns:
	>=0		number of matches before target count reached
	<0		error (system-return)

*******************************************************************************/

module ;

#include	<envstandards.h>	/* MUST be first to configure */
#include	<cstddef>		/* |nullptr_t| */
#include	<cstdlib>
#include	<new>			/* |nothrow(3c++)| */
#include	<vector>
#include	<clanguage.h>
#include	<utypedefs.h>
#include	<utypealiases.h>
#include	<usysdefs.h>
#include	<usysrets.h>
#include	<localmisc.h>

export module vecbool ;

/* local defines */


/* imported namespaces */

using std::nullptr_t ;			/* type */
using std::vector ;			/* type */
using std::nothrow ;			/* constant */


/* local typedefs */


/* external subroutines */


/* external variables */


/* local structures */

    enum vecboolmems {
	vecboolmem_start,
	vecboolmem_finish,
	vecboolmem_extent,
	vecboolmem_count,
	vecboolmem_set,
	vecboolmem_clr,
	vecboolmem_tst,
	vecboolmem_overlast
    } ; /* end enum (vecvoolmems) */

export {
    struct vecbool_fl {
	uint		open:1 ;
    } ;
    struct vecbool ;
    struct vecbool_co {
	vecbool		*op = nullptr ;
	int		w = -1 ;
	void operator () (vecbool *p,int m) noex {
	    op = p ;
	    w = m ;
	} ;
	operator int () noex ;
	int operator [] (int) noex ;
    } ; /* end struct (vecbool_co) */
    struct vecbool : vector<bool> {
	friend 		vecbool_co ;
	vecbool_co	start ;
	vecbool_co	finish ;
	vecbool_co	extent ;
	vecbool_co	count ;
	vecbool_co	set ;
	vecbool_co	clr ;
	vecbool_co	tst ;
	vecbool_fl	fl{} ;
	vecbool() noex {
	    start	(this,vecboolmem_start) ;
	    finish	(this,vecboolmem_finish) ;
	    extent	(this,vecboolmem_extent) ;
	    count	(this,vecboolmem_count) ;
	    set		(this,vecboolmem_set) ;
	    clr		(this,vecboolmem_clr) ;
	    tst		(this,vecboolmem_tst) ;
	} ;
	int resize(int n) noex ;
	operator int () const noex {
	    return int(size()) ;
	} ;
	void dtor() noex ;
	destruct vecbool() {
	    if (fl.open) dtor() ;
	} ;
    private:
	int icount() noex ;
	int adj(int) noex ;
    } ; /* end struct (vecbool) */
} /* end export */


/* forwards references */


/* local variables */


/* exported variables */


/* exported subroutines */



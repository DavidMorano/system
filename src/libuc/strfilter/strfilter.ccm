/* strfilter MODULE (primary-module-interface) */
/* charset=ISO8859-1 */
/* lang=C++20 (conformance reviewed) */

/* manage a variable length bit-array */
/* version %I% last-modified %G% */

#define	CF_BINSEARCH	1		/* binary-search */

/* revision history:

	= 1998-09-10, David A­D­ Morano
	This subroutine was written for Rightcore Network Services.

	= 2020-08-13, David A­D­ Morano
	This code has been modularized (w/ C++20 modules).
	There was really no good reason for this.  In many cases,
	w/ my limited experience w/ modules so far, sometimes
	modules are more of a hassle than they are worth.

*/

/* Copyright © 1998,2020 David A­D­ Morano.  All rights reserved. */

/*******************************************************************************

	Module:
	strfilter

	Description:
	This object implements a (fast) filter for strings.

	Synopsis:

	Arguments:

	Returns:
	>=0		number of matches before target count reached
	<0		error (system-return)

*******************************************************************************/

module ;

#include	<envstandards.h>	/* MUST be first to configure */
#include	<climits>		/* |UCHAR_MAX| */
#include	<cstddef>		/* |nullptr_t| */
#include	<cstdlib>
#include	<new>			/* |nothrow(3c++)| */
#include	<bitset>
#include	<clanguage.h>
#include	<utypedefs.h>
#include	<utypealiases.h>
#include	<usysdefs.h>
#include	<usysrets.h>
#include	<localmisc.h>

export module strfilter ;

import ureserve ;			/* |vecstr(3u)| */

/* local defines */


/* imported namespaces */

using std::nullptr_t ;			/* type */
using std::bitset ;			/* type */
using std::nothrow ;			/* constant */


/* local typedefs */

#ifndef	CF_BINSEARCH
#define	CF_BINSEARCH	1		/* binary-search */
#endif


/* external subroutines */


/* external variables */


/* local structures */

    enum strfiltermems {
	strfiltermem_start,
	strfiltermem_finish,
	strfiltermem_extent,
	strfiltermem_count,
	strfiltermem_ready,
	strfiltermem_overlast
    } ; /* end enum (vecvoolmems) */

constexpr cint		tlen = (UCHAR_MAX + 1) ;

export {
    struct strfilter_fl {
	uint		open:1 ;
	uint		ready:1 ;
    } ;
    struct strfilter ;
    struct strfilter_co {
	strfilter	*op = nullptr ;
	int		w = -1 ;
	void operator () (strfilter *p,int m) noex {
	    op = p ;
	    w = m ;
	} ;
	operator int () noex ;
	int operator [] (int) noex ;
    } ; /* end struct (strfilter_co) */
    struct strfilter : vecstr {
	friend 		strfilter_co ;
	strfilter_co	start ;
	strfilter_co	finish ;
	strfilter_co	extent ;
	strfilter_co	count ;
	strfilter_co	ready ;
	strfilter_fl	fl{} ;
	bitset<tlen>	filtchr ;
	ulong		*filtarr{} ;
	uint		magic{} ;
	int		idx{} ;		/* highest index */
	int		ext{} ;		/* extent */
	int		nents ;
	strfilter() noex {
	    start	(this,strfiltermem_start) ;
	    finish	(this,strfiltermem_finish) ;
	    extent	(this,strfiltermem_extent) ;
	    count	(this,strfiltermem_count) ;
	    ready	(this,strfiltermem_ready) ;
	} ;
	int add(cchar *,int = -1) noex ;
	int have(cchar *,int = -1) noex ;
	int ents() noex ;
	void dtor() noex ;
	operator int () const noex ;
	destruct strfilter() {
	    if (fl.open || magic) dtor() ;
	} ;
    private:
	int istart() noex ;
	int ifinish() noex ;
	int icount() const noex ;
	int iaddone(cchar *,int) noex ;
	int ihave(cchar *,int) noex ;
	int inschrs(cchar *,int) noex ;
	int iready() noex ;
	int extend(int = 1) noex ;
    } ; /* end struct (strfilter) */
} /* end export */


/* local variables */

constexpr bool		f_binsearch = CF_BINSEARCH ;





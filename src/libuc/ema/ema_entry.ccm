/* ema_entry MODULE (primary module interface) */
/* charset=ISO8859-1 */
/* lang=C++20 */

/* Entry (entry) -- used within EMA */
/* version %I% last-modified %G% */


/* revision history:

	= 1998-03-01, David A­D­ Morano
	This object module was originally written.

*/

/* Copyright © 1998 David A­D­ Morano.  All rights reserved. */

/*******************************************************************************

  	Object:
	entry

	Description:
	This is an email address handling module object.  It can
	parse out and store hierarchically organized EMAs.

*******************************************************************************/

module ;

#include	<envstandards.h>	/* MUST be ordered first to configure */
#include	<cstddef>		/* |nullptr_t| */
#include	<cstdlib>
#include	<functional>		/* |mem_fn(3c++)| */
#include	<clanguage.h>
#include	<utypedefs.h>
#include	<utypealiases.h>
#include	<usysdefs.h>
#include	<usysrets.h>
#include	<uclibmem.h>		/* |uclibmem(3uc)| */
#include	<ema.h>
#include	<localmisc.h>

#include	"ema.h"

#pragma		GCC dependency		"mod/libutil.ccm"

export module ema_entry ;

import libutil ;			/* |memclear(3u)| */

export {
        int	entry_start(ema_ent *) noex ;
        int	entry_finish(ema_ent *) noex ;
        int	entry_startload(ema_ent *,ema_ent *) noex ;
} /* end export */


/* local defines */


/* imported namespaces */

using libuc::libmem ;			/* variable */


/* local typedefs */

typedef ema_ent		ent ;
typedef ema_ent	*	entp ;


/* external subroutines */


/* external variables */


/* local structures */


/* forward references */

local int itemallo(ccharp &dp,cchar *ip,int il) noex {
    	int		rs = SR_OK ;
	if (ip) {
	    if (cchar *cp ; (rs = libmem.strw(ip,il,&cp)) >= 0) {
		dp = cp ;
	    }
	} /* end if (non-null) */
    	return rs ;
} /* end subroutine (itemallo) */

local int itemfree(ccharp &ip) noex {
    	int		rs = SR_OK ;
	int		rs1 ;
	if (ip) {
	    void *vp = voidp(ip) ;
	    rs1 = libmem.free(vp) ;
	    if (rs >= 0) rs = rs1 ;
	    ip = nullptr ;
	} /* end if (non-null) */
	return rs ;
} /* end subroutine (itemfree) */


/* local variables */


/* exported variables */


/* exported subroutines */

int entry_start(ema_ent *ep) noex {
	int		rs = SR_FAULT ;
	if (ep) {
	    rs = memclear(ep) ; /* dangerous */
	    ep->type = ematype_reg ;
	}
	return rs ;
} /* end subroutine (entry_start) */

int entry_finish(ema_ent *ep) noex {
	int		rs = SR_FAULT ;
	int		rs1 ;
	if (ep) {
	    rs = SR_OK ;
	    {
	        rs1 = itemfree(ep->op) ;
	        if (rs >= 0) rs = rs1 ;
	    }
	    {
	        rs1 = itemfree(ep->ap) ;
	        if (rs >= 0) rs = rs1 ;
	    }
	    {
		rs1 = itemfree(ep->rp) ;
	        if (rs >= 0) rs = rs1 ;
	    }
	    {
	        rs1 = itemfree(ep->cp) ;
	        if (rs >= 0) rs = rs1 ;
	    }
	    if (ep->listp) {
		{
		    ema *emap = cast_static<ema *>(ep->listp) ;
	            rs1 = ema_finish(emap) ;
	            if (rs >= 0) rs = rs1 ;
		}
		{
	            rs1 = libmem.free(ep->listp) ;
	            if (rs >= 0) rs = rs1 ;
		}
	        ep->listp = nullptr ;
	    } /* end if (recursive free-up) */
	} /* end if (non-null) */
	return rs ;
} /* end subroutine (entry_finish) */

int entry_startload(ema_ent *ep,ema_ent *oep) noex {
	int		rs = SR_FAULT ;
	if (ep && oep) {
	    rs = SR_OK ;
	    *ep = *oep ; /* <- copy */
	    if (rs >= 0) rs = itemallo(ep->op,oep->op,oep->ol) ;
	    if (rs >= 0) rs = itemallo(ep->ap,oep->ap,oep->al) ;
	    if (rs >= 0) rs = itemallo(ep->rp,oep->rp,oep->rl) ;
	    if (rs >= 0) rs = itemallo(ep->cp,oep->cp,oep->cl) ;
	    if (oep->listp != nullptr) {
	        cint	nsz = szof(ema) ;
	        ep->listp = nullptr ;
	        if (void *vp ; (rs = libmem.mall(nsz,&vp)) >= 0) {
	            ema *nop = resumelife<ema>(vp) ;
	            if ((rs = ema_start(nop)) >= 0) {
		        ema *emap = resumelife<ema>(ep->listp) ;
	                if ((rs = ema_addents(nop,emap)) >= 0) {
	                    ep->listp = nop ;
	                }
	                if (rs < 0) {
	                    ema_finish(nop) ;
		        }
	            } /* end if (ema_start) */
	            if (rs < 0) {
	                libmem.free(nop) ;
		    }
	        } /* end if (allocation) */
	    } /* end if (non-nullptr) */
	} /* end if (non-null) */
	return rs ;
} /* end subroutine (entry_startload) */

#if	COMMENT
static int entry_debugprint(ema_ent *ep,cchar *s) noex {
    	int		rs = SR_FAULT ;
	if (ep) {
	    rs = SR_OK ;
	if (s != nullptr) {
	    debugprintf("entry_debugprint: s=%s\n",s) ;
	}
	debugprintf("entry_debugprint: type=%u\n",ep->type) ;
	if (ep->op)
	    debugprintf("entry_debugprint: O %u %r\n",
	        ep->ol,ep->op,ep->ol) ;
	if (ep->ap)
	    debugprintf("entry_debugprint: A %u %r\n",
	        ep->al,ep->ap,ep->al) ;
	if (ep->rp)
	    debugprintf("entry_debugprint: R %u %r\n",
	        ep->rl,ep->rp,ep->rl) ;
	if (ep->cp)
	    debugprintf("entry_debugprint: C %u %r\n",
	        ep->cl,ep->cp,ep->cl) ;
	} /* end if (non-null) */
	return rs ;
}
/* end subroutine (entry_debugprint) */
#endif /* COMMENT */



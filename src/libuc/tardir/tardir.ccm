/* tardir MODULE (primary-module-interface) */
/* charset=ISO8859-1 */
/* lang=C++20 (conformance reviewed) */

/* enumerate filenames */
/* version %I% last-modified %G% */

#define	CF_DEBUG	0		/* debug */

/* revision history:

	= 2017-03-21, David A-D- Morano
	This subroutine was originally written.

*/

/* Copyright © 2017 David A­D­ Morano.  All rights reserved. */

/*******************************************************************************

	Object:
	tardir

	Description:
	This is a container for directories.  Only a single name
	for each directory is retained (additional path-names for
	directories) are ignored (the first one is picked).

*******************************************************************************/

module ;

#include	<envstandards.h>	/* ordered first to configure */
#include	<unistd.h>
#include	<fcntl.h>
#include	<cstddef>		/* |nullptr_t| */
#include	<cstdlib>
#include	<clanguage.h>
#include	<utypedefs.h>
#include	<utypealiases.h>
#include	<usysdefs.h>
#include	<usysrets.h>
#include	<localmisc.h>

#pragma		GCC dependency	"mod/ureserve.ccm"
#pragma		GCC dependency	"mod/fonce.ccm"

export module tardir ;

import ureserve ;			/* |vecstr(3u)| */
import fonce ;

/* local defines */

#ifndef	CF_DEBUG
#define	CF_DEBUG	0		/* debug */
#endif


/* imported namespaces */


/* local typedefs */


/* external subroutines */


/* external variables */


/* local structures */

    enum tardirmems {
	tardirmem_start,
	tardirmem_finish,
	tardirmem_count,
	tardirmem_overlast
    } ;

export {
    struct tardir_cur {
	int		i ;
    } ;
    struct tardir ;
    struct tardir_fl {
	uint		open:1 ;
	uint		debug:1 ;
    } ;
    struct tardir_co {
	tardir		*op = nullptr ;
	int		w = -1 ;
	void operator () (tardir *p,int m) noex {
	    op = p ;
	    w = m ;
	} ;
	int operator () (int = 0) noex ;
	operator int () noex {
	    return operator () (0) ;
	} ;
    } ; /* end struct (tardir_co) */
    struct tardir {
	friend		tardir_co ;
	tardir_co	start ;
	tardir_co	finish ;
	tardir_co	count ;
	tardir_fl	fl{} ;
	vecstr		dirs ;
	fonce		seen ;
	tardir() noex {
	    start	(this,tardirmem_start) ;
	    finish	(this,tardirmem_finish) ;
	    count	(this,tardirmem_count) ;
	} ;
	int add(cchar *,int) noex ;
	int get(int,ccharpp) noex ;
	int curbegin(tardir_cur *) noex ;
	int curenum(tardir_cur *,ccharpp) noex ;
	int curend(tardir_cur *) noex ;
	void dtor() noex ;
	operator int () noex ;
	destruct tardir() {
	    if (fl.open) dtor() ;
	}
    private:
	int istart() noex ;
	int ifinish() noex ;
	int icount() noex ;
	int iaddone(cchar *,int,ustat *) noex ;
    } ; /* end struct (tardir) */
} /* end export */


/* forward references */


/* local variables */

cbool		f_debug = CF_DEBUG ;


/* exported variables */


/* exported subroutines */


/* local subroutines */



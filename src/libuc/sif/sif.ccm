/* sif MODULE (primary-module-interface) */
/* charset=ISO8859-1 */
/* lang=C++20 */

/* String-Interate-Find (SIF) object */
/* version %I% last-modified %G% */


/* revision history:

	= 1998-11-01, David A­D­ Morano
	This subroutine was written for Rightcore Network Services.

	= 2020-09-04, David A­D­ Morano
	Modularized.

*/

/* Copyright © 1998,2020 David A­D­ Morano.  All rights reserved. */

module ;

#include	<envstandards.h>	/* ordered first to configure */
#include	<cstddef>		/* |nullptr_t| */
#include	<cstdlib>
#include	<clanguage.h>
#include	<utypedefs.h>
#include	<utypealiases.h>
#include	<usysdefs.h>
#include	<usysrets.h>

export module sif ;

import chrset ;

enum sifmems {
	sifmem_iswhitechr,
	sifmem_iswhitestr,
	sifmem_isspanchr,
	sifmem_isspanstr,
	sifmem_overlast
} ; /* end enum (sifmems) */

export {
    struct sif ;
    struct sif_co {
	sif		*op = nullptr ;
	int		w = -1 ;
	void operator () (sif *p,int m) noex {
	    op = p ;
	    w = m ;
	} ;
	operator bool () noex ;
    } ; /* end struct (sif_co) */
    struct sif {
	sif_co		iswhitechr ;
	sif_co		iswhitestr ;
	sif_co		isspanchr ;
	sif_co		isspanstr ;
	chrset		sset ;
	cchar		*sp ;
	cchar		*sstr ;
	int		sl ;
	int		sch ;
	sif(cc *p,int l,cc *ss,int c = 0) noex : sp(p), sl(l), sch(c) { 
	    iswhitechr	(this,sifmem_iswhitechr) ;
	    iswhitestr	(this,sifmem_iswhitestr) ;
	    isspanchr	(this,sifmem_isspanchr) ;
	    isspanstr	(this,sifmem_isspanstr) ;
	    sstr = ss ;
	    if (ss) {
		sset.load(ss) ;
	    } else if (sch) {
		sset.set(sch) ;
	    }
	} ; /* end ctor */
	sif(cchar *p,int l = -1,int c = 0) noex : sif(p,l,nullptr,c) { } ;
	sif(cchar *p,int l,cchar *ss) noex : sif(p,l,ss,0) { } ;
	int next(cchar **) noex ;
	int nextchr(cchar **) noex ;
	int nextbrk(cchar **) noex ;
	int spchr(cchar **) noex ;
	int spbrk(cchar **) noex ;
	int chr(cchar **) noex ;
	int brk(cchar **) noex ;
	int operator () (cchar **) noex ;
    } ; /* end struct (sif) */
} /* end export */

int sif::nextchr(cchar **rpp) noex {
    	return nextbrk(rpp) ;
}



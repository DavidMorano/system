/* fmtflag MODULE (primary-module-interface) */
/* charset=ISO8859-1 */
/* lang=C++20 */

/* object to mange formatting flags */
/* version %I% last-modified %G% */


/* revision history:

	= 1998-03-01, David A­D­ Morano
	Of course, this subroutine was inspired by the UNIX®
	equivalent, but this is my own version for a) when I do not
	have the UNIX® libraries around, and b) to customize it to
	what I want!

	= 2020-02-15, David A­D­ Morano
	I modularized (w/ C++20 modules) this code.

*/

/* Copyright © 1998,2020 David A-D- Morano.  All rights reserved. */

/*******************************************************************************

  	Object:
	fmtflag

	Description:
	This object supports the FMTSUB object by manging formatting
	flags (in certain cases).

*******************************************************************************/

module ;

#include	<envstandards.h>	/* MUST be first to configure */
#include	<cstddef>		/* |nullptr_t| */
#include	<cwchar>
#include	<clanguage.h>
#include	<utypedefs.h>
#include	<utypealiases.h>
#include	<usysdefs.h>

export module fmtflag ;

export {
    enum fmtflags {
	fmtflag_alternate,		/* alternate form */
	fmtflag_zerofill,		/* zero fill on left */
	fmtflag_plus,			/* leading plus sign */
	fmtflag_left,			/* left justified */
	fmtflag_space,			/* leading space */
	fmtflag_thousands,		/* group by thousands */
	fmtflag_overlast
    } ;
} /* end export */

enum fmtflagmems {
    	fmtflagmem_alternate,
	fmtflagmem_zerofill,
	fmtflagmem_plus,
	fmtflagmem_left,
	fmtflagmem_space,
	fmtflagmem_thousands,
	fmtflagmem_overlast
} ; /* end struct (fmtflagmems) */

export {
    struct fmtflag ;
    struct fmtflag_co {
	fmtflag		*op = nullptr ;
	int		w = -1 ;
	void operator () (fmtflag *p,int m) noex {
	    op = p ;
	    w = m ;
	} ;
	void operator = (bool a) noex ;
	operator bool () noex ;
	bool operator () () noex { 
	    return operator bool () ;
	} ;
    } ; /* end struct (fmtflag_co) */
    struct fmtflag {
	fmtflag_co	alternate ;
	fmtflag_co	zerofill ;
	fmtflag_co	plus ;
	fmtflag_co	left ;
	fmtflag_co	space ;
	fmtflag_co	thousands ;
	int		fg{} ;
	fmtflag() noex {
	    alternate(this,fmtflag_alternate) ;
	    zerofill(this,fmtflag_zerofill) ;
	    plus(this,fmtflag_plus) ;
	    left(this,fmtflag_left) ;
	    space(this,fmtflag_space) ;
	    thousands(this,fmtflag_thousands) ;
	} ;
	fmtflag(const int a) noex : fg(a) { } ;
	operator int () noex {
	    return fg ;
	} ;
	bool operator [] (int idx) noex {
	    return bool((fg >> idx) & 1) ;
	} ;
	operator bool () noex {
	    return bool(fg) ;
	} ;
    } ; /* end struct (fmtflag) */
} /* end export */



/* fmtutil MODULE (primary-module-interface) */
/* charset=ISO8859-1 */
/* lang=C++20 */

/* subroutine to format string output */
/* version %I% last-modified %G% */


/* revision history:

	= 1998-03-01, David A­D­ Morano
	Of course, this subroutine was inspired by the UNIX®
	equivalent, but this is my own version for a) when I do not
	have the UNIX® libraries around, and b) to customize it to
	what I want!

	= 2020-02-15, David A­D­ Morano
	I modularized (w/ C++20 modules) this code.

*/

/* Copyright © 1998,2020 David A-D- Morano.  All rights reserved. */

/*******************************************************************************

	Names:
	isourbad
	hasourbad

	Description:
	This object supports the FMTSTR subroutine and the FMTSUB object.

*******************************************************************************/

module ;

#include	<envstandards.h>	/* MUST be first to configure */
#include	<cstddef>		/* |nullptr_t| */
#include	<cwchar>
#include	<clanguage.h>
#include	<utypedefs.h>
#include	<utypealiases.h>
#include	<usysdefs.h>
#include	<mkchar.h>
#include	<ischarx.h>
#include	<localmisc.h>

#include	"fmtstr.h"

export module fmtutil ;

export {
    constexpr cchar	nullstr[] = FMTSTR_NULLSTR ;
    constexpr cint	chx_binary = mkchar('b') ;
    constexpr cint	chx_expand = mkchar('ß') ;
    constexpr cint	chx_badsub = mkchar('¿') ;
}

export {
    bool hasourbad(cchar *,int) noex ;
    inline bool isourbad(int ch) noex {
    	return (! isprintterm(ch)) ;
    }
} /* end export */

bool hasourbad(cchar *sp,int sl) noex {
	bool		f = false ;
	while (sl && *sp) {
	    cint	ch = mkchar(*sp) ;
	    f = isourbad(ch) ;
	    if (f) break ;
	    sp += 1 ;
	    sl -= 1 ;
	} /* end while */
	return f ;
}
/* end subroutine (hasourbad) */



/* cfpowx MODULE */
/* encoding=ISO8859-1 */
/* lang=C++20 (conformance reviewed) */

/* conversion of power-base-two c-string to their binary integer types */
/* version %I% last-modified %G% */


/* revision history:

	= 2008-05-06, David A­D­ Morano
	Convert numeric digit c-strings (of pow-of-two bases) into
	integers.

	= 2020-05-07, David A-D- Morano
	I converted this (formerly a header-only file) to a module.

*/

/* Copyright © 2008,2020 David A­D­ Morano.  All rights reserved. */

/*******************************************************************************

  	Name:
	cfpowsx
	cfpowux

	Description:
	This code converts a c-string of digits (of a power-of-two
	base) into the normal integer types: these being |int|,
	|long|, and |longlong| and their associated unsigned
	variations.  Power-of-two bases (up to a maximum of 64)
	are: 2, 4, 8, 16, 32, 64.

	Notes:
	1. This code is limited to a maximum base of 64 (the standard).
	2. I find it (sort of) funny that I wrote a subroutine that
	does this very function back in 1983 (40 years ago), but in
	M68k assembly language!

*******************************************************************************/

module ;

#include	<envstandards.h>	/* ordered first to configure */
#include	<climits>		/* |CHAR_BIT| + |UCHAR_MAX| */
#include	<cstddef>		/* |nullptr_t| */
#include	<cstdlib>
#include	<clanguage.h>
#include	<utypedefs.h>
#include	<utypealiases.h>
#include	<usysdefs.h>
#include	<usysrets.h>
#include	<stdintx.h>		/* extended integer types */
#include	<cfutil.hh>		/* namespace |cfx| + |cstrlen(3u)| */
#include	<checkbase.h>
#include	<cfutil.hh>		/* namespace |cfx| */
#include	<char.h>
#include	<ischarx.h>		/* |isplusminus(2uc)| */
#include	<localmisc.h>

export module cfpowx ;

template<typename T> struct cfpowshelp {
	cint		nb = (CHAR_BIT * szof(T)) ;
	T		*rp = nullptr ;
	T		val = 0 ;	/* value to create */
	T		cutoff ;
	T		tmax = 0 ;
	T		tmin ;
	int		cutlim ;
	int		sl ;
	int		base ;
	bool		fneg = false ;
	cchar		*sp ;
	cfpowshelp(cchar *asp,int asl,int b,T *arp) noex : sp(asp), sl(asl) {
	    const T	one = 1 ;
	    tmin = (one << (nb - 1)) ;
	    tmax = (~ tmax) & (~ tmin) ;
	    base = b ;
	    rp = arp ;
	} ; /* end ctor */
	void prepare() noex {
	    cutoff = fneg ? tmin : tmax ;
	    cutlim = (cutoff % base) ;
	    cutoff /= base ;
	    if (fneg) {
		if (cutlim > 0) {
		    cutlim -= base ;
		    cutoff += 1 ;
		}
		cutlim = (-cutlim) ;
	    }
	} ; /* end method (prepare) */
	int getval(int ch) noex {
	    int		rs = CHAR_TOVAL(ch) ;
	    if ((rs == UCHAR_MAX) || (rs >= base)) {
		rs = SR_DOM ;
	    }
	    return rs ;
	} ; /* end method (getval) */
	int getsign() noex {
    	    cint rs = cfx::getsign(sp,sl,&fneg) ;
	    sp += (sl - rs) ;
	    sl = rs ;
	    return rs ;
	} ; /* end if (getsign) */
	int proc() noex {
	    int		rs = SR_INVALID ;
	    while (sl && *sp && ((rs = getval(*sp)) >= 0)) {
		cint	nv = rs ;
		if (fneg) {
		    if ((val < cutoff) || (val == cutoff && nv > cutlim)) {
			rs = SR_RANGE ;
		    } else {
		        val *= base;
		        val -= nv ;
		    }
		} else {
		    if ((val > cutoff) || (val == cutoff && nv > cutlim)) {
			rs = SR_RANGE ;
		    } else {
			val *= base;
			val += nv ;
		    }
		}
		if (rs < 0) break ;
	    } /* end while */
	    return rs ;
	} ; /* end method (proc) */
	operator int () noex {
	    int		rs ;
	    if ((rs = getsign()) >= 0) {
		prepare() ;
		rs = proc() ;
	    }
	    return rs ;
	} ;
} ; /* end struct (cfpowshelp) */

export {
    template<typename T> int cfpowsx(cchar *sp,int sl,int b,T *rp) noex {
	int		rs = SR_FAULT ;
	if (sp && rp) {
	    if (cfpowshelp cfo(sp,sl,b,rp) ; (rs = cfo.getsign()) >= 0) {
		cfo.prepare() ;
		rs = cfo.proc() ;
	    } /* end if */
	} /* end if (non-null) */
	return rs ;
    } /* end subroutine-template (cfpowsx) */
} /* end export */



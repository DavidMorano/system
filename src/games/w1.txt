
Part 1: Determine if a string of parens is balanced

“” -> true
“(“ -> false
“)” -> false
“()” -> true
“)(“ -> false
“()()” -> true
“(())” -> true
“(()())” -> true

bool IsBalanced(const std::string &input) {
  bool f = true ;
  int count = 0 ;
  for (auto ch:input) {
     if (ch == '(') { 
        count += 1 ;
     } else if (ch == ')') {
        if (count == 0) {
          f = false ;
          break ;
        }
        count -= 1 ;
     }
  } /* end for */
  if (f && (count > 0)) f = false ;
  return f ;
}



Part 2: Generating sets of strings of balanced parens

0 -> {“”}
1 -> {}
2 -> {“()”}
3 -> {}
4 -> {“()()”, “(())”}
5 -> {}
6 -> {“()()()”, “()(())”, “(())()”, “(()())”, “((()))”}
7 -> {}
8 -> {“()()()()”, ... } (( () () ))    ( () () (( () () )) () ) 

std::set<std::string> Generate(const int N) {
  std::set<std::string>	  res ;
  // TODO
  if (N & 1) == 0) {
    std:string	s ;
    for (int i = 0 ; i < N ; i += 2) {
       s += "()" ;
    }
    res.insert(s) ;

    s.clear() ;
    for (i = 0 ; N/2 ; i += 1) {
      s += '(' ;
    }
    for (i = 0 ; N/2 ; i += 1) {
      s += '(' ;
    }
    res.insert(s) ;

    int mag = N/2 ;
    s.clear() ;

    for (i = 0 ; i < (N-1) ; i += 1) {
      
trysyting(res,N,s,ch) {
    if (s.length() == N) {
       if (isBal(s)) {
          res.push_back(s) ;
          return true ;

        }
        return false ;
    } else {
    trystring(res,N,s,')') ;
               trystring(res,N,s,'(') ;
    }
} 
 
    )

  } else if (N == 0) {
     res.insert("") ;
  }
  return res ;
}



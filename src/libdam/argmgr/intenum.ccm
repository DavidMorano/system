/* intenum MODULE (primary-module-interface) */
/* charset=ISO8859-1 */
/* lang=C++20 */

/* integer enumerator */
/* version %I% last-modified %G% */


/* revision history:

	= 1998-09-10, David A­D­ Morano
	This subroutine was written for Rightcore Network Services.

	= 2020-08-13, David A­D­ Morano
	This code has been modularized (w/ C++20 modules).

*/

/* Copyright © 1998,2020 David A­D­ Morano.  All rights reserved. */

/*******************************************************************************

  	Object:
	intenum

	Description:
	This object enumerates integer termination conditions.

*******************************************************************************/

module ;

#include	<envstandards.h>	/* MUST be first to configure */
#include	<cstddef>		/* |nullptr_t| */
#include	<cstdlib>
#include	<new>			/* |nothrow(3c++)| */
#include	<clanguage.h>
#include	<utypedefs.h>
#include	<utypealiases.h>
#include	<usysdefs.h>
#include	<localmisc.h>

export module intenum ;

/* local defines */


/* imported namespaces */


/* local typedefs */


/* external subroutines */


/* local structures */

export {
    struct intenum_iter {
    	int	i = 0 ;
    } ;
    struct intenum {
    	typedef intenum_iter	iterator ;
    	int	ne = 0 ;
	bool	*fp ;
    	intenum(int n,bool &f) noex : ne(n), fp(&f) { } ;
	intenum begin() noex ;
	intenum end() noex ;
    } ;
} /* end export */


/* forward references */


/* forward refernces */


/* local variables */


/* exported variables */


/* exported subroutines */



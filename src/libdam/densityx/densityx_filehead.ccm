/* densitryx_filehead MODULE (primary-module-interface) */
/* charset=ISO8859-1 */
/* lang=C++20 (conformance reviewed) */

/* manage reading or writing of a density file */
/* version %I% last-modified %G% */


/* revision history:

	= 2004-02-17, David A­D­ Morano
	This code module was inspired from the mail-message-id
	database (which is used to eliminate repeated mail messages).

	= 2020-05-07, David A-D- Morano
	I converted this (formerly a header-only file) to a module.

*/

/* Copyright © 1998,2020 David A­D­ Morano.  All rights reserved. */

/*******************************************************************************

  	Object:
	densityx::filehead

	Description:
	This module manages the reading and writing of entries in
	a density file.

*******************************************************************************/

module ;

#include	<envstandards.h>	/* must be ordered fist to configure */
#include	<climits>
#include	<cstddef>		/* |nullptr_t| */
#include	<cstdlib>
#include	<usystem.h>
#include	<serialbuf.h>
#include	<localmisc.h>

export module densityx_filehead ;

/* local defines */


/* imported namespaces */


/* local typedefs */


/* external subroutines */


/* external variables */


/* exported structures */

export {
    namespace densityx {
        struct filehead {
	    static cint		bufsz ;
	    uint		wcount ;
	    uint		wtime ;
	    uint		nents ;
	    int rd(char *) noex ;
	    int wr(cchar *) noex ;
        } ; /* end struct (filehead) */
	cint filehead::bufsz = (3 * szof(uint)) ;
    } /* end namespace (densityx) */
}


/* forward references */


/* local variables */


/* exported variables */


/* exported subroutines */

namespace densityx {
    int filehead::rd(char *bufp) noex {
	cint		bufl = bufsz ;
	int		rs ;
	int		rs1 ;
	if (serialbuf mb ; (rs = mb.start(bufp,bufl)) >= 0) {
	    {
		mb << wcount ;
		mb << wtime ;
		mb << nents ;
	    }
	    rs1 = mb.finish ;
	    if (rs >= 0) rs = rs1 ;
	} /* end if (serialbuf) */
	return rs ;
    } /* end method (filehead::rd) */
    int filehead::wr(cchar *bufp) noex {
	cint		bufl = bufsz ;
	int		rs ;
	int		rs1 ;
	char		*buf = cast_const<charp>(bufp) ;
	if (serialbuf mb ; (rs = mb.start(buf,bufl)) >= 0) {
	    {
		mb >> wcount ;
		mb >> wtime ;
		mb >> nents ;
	    }
	    rs1 = mb.finish ;
	    if (rs >= 0) rs = rs1 ;
	} /* end if (serialbuf) */
	return rs ;
    } /* end method (filehead::wr) */
} /* end namespace (densityx) */



/* modproc MODULE (primary-module-interface) */
/* charset=ISO8859-1 */
/* lang=C++20 */

/* Module-Processing */
/* version %I% last-modified %G% */

#define	CF_DEBUG	1		/* debugging */

/* revision history:

	= 1998-04-10, David A­D­ Morano
	This subroutine was written for Rightcore Network Services.

*/

/* Copyright © 1998 David A­D­ Morano.  All rights reserved. */

module ;

#include	<envstandards.h>	/* MUST be first to configure */
#include	<cstddef>		/* |nullptr_t| */
#include	<cstdlib>
#include	<cstdio>
#include	<clanguage.h>
#include	<utypedefs.h>
#include	<utypealiases.h>
#include	<usysdefs.h>
#include	<usysrets.h>

#pragma		GCC dependency		"mod/ureserve.ccm"

export module modproc ;

import ureserve ;			/* |vecstr(3u)| */
import debug ;

/* local defines */

#ifndef	CF_DEBUG
#define	CF_DEBUG	0		/* debugging */
#endif

cbool			f_debug = CF_DEBUG ;

export {
    extern int	modprocload(vecstr *,cchar *) noex ;
}

export {
    enum typeouts {
    	typeout_file,
    	typeout_name,
    	typeout_obj,
    	typeout_overlast,
    } ; /* end enum (typeouts) */
    constexpr cpcchar	typeouts[] = {
    	"file",
	"name",
	"obj",
	nullptr
    } ; /* end array (typeouts) */
} /* end export) */

enum modprocmems {
    	modprocmem_start,
    	modprocmem_finish,
    	modprocmem_ovelast
} ; /* end enum (modprocmems) */

export {
    struct modproc ;
    struct modproc_co {
	modproc		*op = nullptr ;
	int		w = -1 ;
	constexpr void operator () (modproc *p,int m) noex {
	    op = p ;
	    w = m ;
	} ;
	operator int () noex ;
	int operator () () noex {
	    return operator int () ;
	} ;
    } ; /* end struct (modproc_co) */
    struct modproc {
	friend		modproc_co ;
	modproc_co	start ;
	modproc_co	finish ;
	void		*vop{} ;
	modproc() noex {
	    start	(this,modprocmem_start) ;
	    finish	(this,modprocmem_finish) ;
	} ;
        int	procfile(cchar *) noex ;
	int	procout(FILE *,uint) noex ;
	void dtor() noex ;
	destruct modproc() {
	    if (vop) dtor() ;
	} ;
    private:
	int istart() noex ;
	int ifinish() noex ;
    } ; /* end struct (modproc) */
} /* end export */


